openapi: 3.0.3
info:
  title: WebFreeLancers Intro API
  version: 0.1.0
  description: API Documentation for WebFreeLancers Intro website
paths:
  /api/v1/auth/change/password/:
    put:
      operationId: auth_change_password_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/v1/auth/logout/:
    post:
      operationId: auth_logout_create
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '205':
          description: No response body
        '400':
          description: No response body
  /api/v1/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyURL'
          description: ''
  /api/v1/auth/register/verify/{uidb64}/{token}/:
    post:
      operationId: auth_register_verify_create
      parameters:
      - in: path
        name: token
        schema:
          type: string
        description: one time generated token
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        description: user primary key that encoded to base64
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPasswordVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPasswordVerify'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '403':
          description: No response body
  /api/v1/auth/reset/password/:
    post:
      operationId: auth_reset_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyURL'
          description: ''
  /api/v1/auth/reset/password/verify/{uidb64}/{token}/:
    post:
      operationId: auth_reset_password_verify_create
      parameters:
      - in: path
        name: token
        schema:
          type: string
        description: one time generated token
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        description: user primary key that encoded to base64
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPasswordVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPasswordVerify'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '403':
          description: No response body
  /api/v1/projects/{id}/:
    get:
      operationId: projects_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/{id}/feature/create/:
    post:
      operationId: projects_feature_create_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feature'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/{id}/feature/delete/{id}/:
    delete:
      operationId: projects_feature_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/{id}/feature/list/:
    get:
      operationId: projects_feature_list_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
          description: ''
  /api/v1/projects/{id}/feature/update/{id}/:
    put:
      operationId: projects_feature_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feature'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Feature'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/{id}/image/create/:
    post:
      operationId: projects_image_create_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/{id}/image/delete/{id}/:
    delete:
      operationId: projects_image_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/{id}/image/list/:
    get:
      operationId: projects_image_list_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/v1/projects/{id}/image/update/{id}/:
    put:
      operationId: projects_image_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/create/:
    post:
      operationId: projects_create_create
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/delete/{id}/:
    delete:
      operationId: projects_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/projects/list/:
    get:
      operationId: projects_list_retrieve
      tags:
      - projects
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/v1/projects/update/{id}/:
    put:
      operationId: projects_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
components:
  schemas:
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
        password:
          type: string
        password_confirm:
          type: string
      required:
      - old_password
      - password
      - password_confirm
    Feature:
      type: object
      properties:
        text:
          type: string
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - text
      - updated_at
    Image:
      type: object
      properties:
        image:
          type: string
          format: uri
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - image
      - updated_at
    Login:
      type: object
      properties:
        login_method:
          type: string
        password:
          type: string
      required:
      - login_method
      - password
    Project:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          maxLength: 5000
        features:
          type: array
          items:
            type: integer
        images:
          type: array
          items:
            type: integer
        url_example:
          type: string
          format: uri
          maxLength: 200
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - description
      - features
      - images
      - slug
      - title
      - updated_at
      - url_example
    Register:
      type: object
      properties:
        login_method:
          type: string
        password:
          type: string
        password_confirm:
          type: string
      required:
      - login_method
      - password
      - password_confirm
    ResetPassword:
      type: object
      properties:
        login_method:
          type: string
      required:
      - login_method
    ResetPasswordVerify:
      type: object
      properties:
        code:
          type: string
        password:
          type: string
        password_confirm:
          type: string
      required:
      - code
      - password
      - password_confirm
    Token:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
      required:
      - access
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        phone_number:
          type: string
          nullable: true
          maxLength: 11
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        about:
          type: string
          nullable: true
          maxLength: 300
        is_active:
          type: boolean
    VerifyURL:
      type: object
      properties:
        url:
          type: string
          format: uri
      required:
      - url
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
